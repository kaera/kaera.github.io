{"version":3,"sources":["components/Suggest/Suggest.js","utils/searchUtils.js","components/Search/Search.js","App.js","serviceWorker.js","index.js"],"names":["Suggest","props","userInput","suggestions","onSelect","data-testid","map","suggestion","i","inputIndex","searchterm","indexOf","className","onClick","slice","length","nrResults","fetchSuggestData","a","fetch","json","console","error","Search","useState","setUserInput","setSuggestions","searchInput","useRef","useEffect","trim","onSubmit","e","preventDefault","value","name","placeholder","onChange","target","autoComplete","autoFocus","autofocus","ref","type","current","focus","query","App","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAGe,SAASA,EAAQC,GAC9B,IAAQC,EAAqCD,EAArCC,UAAWC,EAA0BF,EAA1BE,YAAaC,EAAaH,EAAbG,SAChC,OACE,qBAAKC,cAAY,UAAjB,SACGF,EAAYG,KAAI,SAACC,EAAYC,GAC5B,IAAMC,EAAaF,EAAWG,WAAWC,QAAQT,GACjD,OACE,sBAEEU,UAAU,eACVC,QAAS,WACPT,EAASG,EAAWG,aAJxB,UAOE,+BAAOH,EAAWG,WAAWI,MAAM,EAAGL,KACtC,iCAASP,IACT,+BACGK,EAAWG,WAAWI,MAAML,EAAaP,EAAUa,UAEtD,uBAAMH,UAAU,cAAhB,eAAiCL,EAAWS,UAA5C,SAXKR,Q,MCXF,SAAeS,EAA9B,kC,4CAAe,WAAgCf,GAAhC,eAAAgB,EAAA,+EAGHC,MAAM,sFAAD,OAC6EjB,IAJ/E,8BAMTkB,OANS,cAELA,EAFK,yBAOJA,EAAKjB,aAPD,uCASXkB,QAAQC,MAAM,iCAAd,MATW,kBAUJ,IAVI,0D,sBCKA,SAASC,EAAOtB,GAC7B,MAAkCuB,mBAAS,IAA3C,mBAAOtB,EAAP,KAAkBuB,EAAlB,KACA,EAAsCD,mBAAS,IAA/C,mBAAOrB,EAAP,KAAoBuB,EAApB,KACMC,EAAcC,iBAAO,MAE3BC,qBAAU,WACJ3B,GAAaA,EAAU4B,OAAOf,QAAU,EAC1C,sBAAC,4BAAAG,EAAA,sEAC2BD,EAAiBf,GAD5C,OACOC,EADP,OAECuB,EAAevB,GAFhB,0CAAD,GAKAuB,EAAe,MAEhB,CAACxB,IAiBJ,OACE,sBAAKU,UAAU,SAASP,cAAY,SAApC,UACE,uBAAMO,UAAU,aAAamB,SARZ,SAACC,GACpBA,EAAEC,iBACFP,EAAe,IACfzB,EAAM8B,SAAS7B,IAKb,UACE,uBACEgC,MAAOhC,EACPiC,KAAK,SACLvB,UAAU,eACVwB,YAAY,SACZC,SAxBa,SAACL,GACpBP,EAAaO,EAAEM,OAAOJ,QAwBhBK,aAAa,MACbC,UAAWvC,EAAMwC,UACjBC,IAAKf,IAENzB,EACC,wBACEU,UAAU,eACV+B,KAAK,QACL9B,QA7Be,SAACmB,GACxBA,EAAEC,iBACFR,EAAa,IACbE,EAAYiB,QAAQC,WA6Bd,6BAEF,wBAAQjC,UAAU,gBAAgB+B,KAAK,cAExCzC,EAAU4B,OACT,cAAC,EAAD,CACE3B,YAAaA,EACbD,UAAWA,EACXE,SAAU,SAAC0C,GACTrB,EAAaqB,GACb7C,EAAM8B,SAASe,MAInB,gCClEO,SAASC,IACtB,OACE,qBAAKnC,UAAU,MAAMP,cAAY,MAAjC,SACE,cAAC,EAAD,CACEoC,WAAS,EACTV,SAAU,SAACe,GAAD,OAAWzB,QAAQ2B,IAAI,aAAcF,QCGnCG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.985f2572.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Suggest.css\";\n\nexport default function Suggest(props) {\n  const { userInput, suggestions, onSelect } = props;\n  return (\n    <div data-testid=\"Suggest\">\n      {suggestions.map((suggestion, i) => {\n        const inputIndex = suggestion.searchterm.indexOf(userInput);\n        return (\n          <div\n            key={i}\n            className=\"suggest-item\"\n            onClick={() => {\n              onSelect(suggestion.searchterm);\n            }}\n          >\n            <span>{suggestion.searchterm.slice(0, inputIndex)}</span>\n            <strong>{userInput}</strong>\n            <span>\n              {suggestion.searchterm.slice(inputIndex + userInput.length)}\n            </span>\n            <span className=\"highlighted\"> ({suggestion.nrResults})</span>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","export default async function fetchSuggestData(userInput) {\n  try {\n    const json = await (\n      await fetch(\n        `https://104jmaadsj.execute-api.eu-central-1.amazonaws.com/default/search-suggest?q=${userInput}`\n      )\n    ).json();\n    return json.suggestions;\n  } catch (e) {\n    console.error(\"Failed to obtain suggest data:\", e);\n    return [];\n  }\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport Suggest from \"../Suggest/Suggest\";\nimport \"./Search.css\";\nimport fetchSuggestData from \"../../utils/searchUtils\";\n\nexport default function Search(props) {\n  const [userInput, setUserInput] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n  const searchInput = useRef(null);\n\n  useEffect(() => {\n    if (userInput && userInput.trim().length >= 2) {\n      (async () => {\n        const suggestions = await fetchSuggestData(userInput);\n        setSuggestions(suggestions);\n      })();\n    } else {\n      setSuggestions([]);\n    }\n  }, [userInput]);\n  const handleChange = (e) => {\n    setUserInput(e.target.value);\n  };\n\n  const handleClearInput = (e) => {\n    e.preventDefault();\n    setUserInput(\"\");\n    searchInput.current.focus();\n  };\n\n  const handleSearch = (e) => {\n    e.preventDefault();\n    setSuggestions([]);\n    props.onSubmit(userInput);\n  };\n\n  return (\n    <div className=\"search\" data-testid=\"Search\">\n      <form className=\"search-box\" onSubmit={handleSearch}>\n        <input\n          value={userInput}\n          name=\"search\"\n          className=\"input-search\"\n          placeholder=\"Zoeken\"\n          onChange={handleChange}\n          autoComplete=\"off\"\n          autoFocus={props.autofocus}\n          ref={searchInput}\n        ></input>\n        {userInput ? (\n          <button\n            className=\"clear-button\"\n            type=\"reset\"\n            onClick={handleClearInput}\n          ></button>\n        ) : (\n          <></>\n        )}\n        <button className=\"search-button\" type=\"submit\"></button>\n      </form>\n      {userInput.trim() ? (\n        <Suggest\n          suggestions={suggestions}\n          userInput={userInput}\n          onSelect={(query) => {\n            setUserInput(query);\n            props.onSubmit(query);\n          }}\n        />\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Search from \"./components/Search/Search\";\n\nexport default function App() {\n  return (\n    <div className=\"App\" data-testid=\"App\">\n      <Search\n        autofocus\n        onSubmit={(query) => console.log(\"Submitted:\", query)}\n      />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}